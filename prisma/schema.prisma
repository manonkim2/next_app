generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  SMSToken   SMSToken[]
  Product    Product[]
  // relationship을 사용해서 해당 User가 작성한 모든 post 가져올 수 있음
  Post       Post[]
  Comment    Comment[]
  Like       Like[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  // Integer : 정수
  id          Int    @id @default(autoincrement())
  title       String
  // Float : 소수점 아래 7자리까지 표현
  price       Float
  photo       String
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  // 조회수
  views       Int       @default(0)
  create_at   DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  // 몇개의 comment가 post를 가리키는지 앎
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Like {
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // like는 한 포스트당 하나만 가능하기때문에, unique한 id 사용
  // userId + postId를 한 값을 id로 사용
  @@id(name: "id", [userId, postId])
}
